name: Server Deploy

on:
  push:
    branches: [main]
    paths:
      - "apps/server/**"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # GitHub Actions IP 가져오기
      - name: Get Public IP
        id: ip
        uses: haythem/public-ip@v1.3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 보안 그룹에 GitHub Actions IP 추가
      - name: Add GitHub Actions IP to Security Group
        run: |
          aws ec2 authorize-security-group-ingress \
              --group-id ${{ secrets.BACKEND_SECURITY_GROUP_ID }} \
              --protocol tcp \
              --port 22 \
              --cidr ${{ steps.ip.outputs.ipv4 }}/32

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.BACKEND_HOST }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # 배포 시작 로그
            echo "Deployment started..."

            # 프로젝트 디렉토리로 이동
            cd ~/amp_music/apps/server

            # 변경사항 가져오기
            git fetch --all
            git reset --hard origin/main

            # 현재 실행 중인 컨테이너 포트 확인 (Blue: 4000, Green: 4001)
            CURRENT_PORT=$(docker ps | grep amp_backend | grep -o '4000\|4001' || echo "4000")
            if [ "$CURRENT_PORT" = "4000" ]; then
              NEW_PORT="4001"
              NEW_NAME="amp_backend_green"
            else
              NEW_PORT="4000"
              NEW_NAME="amp_backend_blue"
            fi

            echo "Current running on port: $CURRENT_PORT"
            echo "Deploying new version to port: $NEW_PORT"

            # 새로운 이미지 빌드
            docker build -t amp_backend:new .

            # 새 버전 실행 (새로운 포트에)
            docker run -d \
              --name $NEW_NAME \
              -p $NEW_PORT:4000 \
              -v $(pwd)/uploads:/app/uploads \
              -v $(pwd)/.env:/app/.env \
              --restart unless-stopped \
              amp_backend:new

            # 새 버전 헬스 체크
            echo "Waiting for new server to start..."
            for i in {1..12}; do
              sleep 5
              if curl -f http://localhost:$NEW_PORT/health; then
                echo "Health check passed!"
                
                # nginx 설정 업데이트 (프록시 포트 변경)
                echo "Updating nginx configuration..."
                sudo sed -i "s/proxy_pass http:\/\/localhost:[0-9]\+/proxy_pass http:\/\/localhost:$NEW_PORT/" /etc/nginx/sites-available/api.ampmusic.im
                sudo nginx -t && sudo systemctl reload nginx

                # 이전 버전 종료
                echo "Stopping old version..."
                docker ps -a | grep amp_backend | grep -v $NEW_NAME | awk '{print $1}' | xargs -r docker rm -f
                
                # 사용하지 않는 이미지 정리
                docker system prune -f

                echo "Deployment successful!"
                exit 0
              fi
              echo "Attempt $i: Health check failed, retrying..."
            done
            
            # 헬스 체크 실패시 롤백
            echo "Health check failed after all attempts, rolling back..."
            docker rm -f $NEW_NAME
            docker system prune -f
            
            # nginx 설정이 변경되었다면 원래대로 복구
            sudo sed -i "s/proxy_pass http:\/\/localhost:[0-9]\+/proxy_pass http:\/\/localhost:$CURRENT_PORT/" /etc/nginx/sites-available/api.ampmusic.im
            sudo nginx -t && sudo systemctl reload nginx
            
            exit 1

      # 보안 그룹에서 GitHub Actions IP 제거
      - name: Remove GitHub Actions IP from Security Group
        if: always()
        run: |
          aws ec2 revoke-security-group-ingress \
              --group-id ${{ secrets.BACKEND_SECURITY_GROUP_ID }} \
              --protocol tcp \
              --port 22 \
              --cidr ${{ steps.ip.outputs.ipv4 }}/32
