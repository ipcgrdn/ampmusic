name: Client Deploy

on:
  push:
    branches: [main]
    paths:
      - "apps/client/**"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # GitHub Actions IP 가져오기
      - name: Get Public IP
        id: ip
        uses: haythem/public-ip@v1.3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 보안 그룹에 GitHub Actions IP 추가
      - name: Add GitHub Actions IP to Security Group
        run: |
          aws ec2 authorize-security-group-ingress \
              --group-id ${{ secrets.FRONTEND_SECURITY_GROUP_ID }} \
              --protocol tcp \
              --port 22 \
              --cidr ${{ steps.ip.outputs.ipv4 }}/32

      # EC2 배포
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.FRONTEND_HOST }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ~/amp/apps/client

            echo "===== 블루-그린 배포 시작: $(date) ====="
            
            # 기존 PM2 프로세스 상태 확인
            echo "기존 PM2 프로세스 확인 중..."
            pm2 list
            
            # 초기 배포 여부 확인
            INITIAL_DEPLOYMENT=false
            if ! pm2 list | grep -q "amp-frontend-blue" && ! pm2 list | grep -q "amp-frontend-green"; then
              echo "블루/그린 환경이 설정되어 있지 않습니다. 초기 배포를 진행합니다."
              INITIAL_DEPLOYMENT=true
              
              # 기존 amp-frontend가 있으면 블루 환경으로 변환
              if pm2 list | grep -q "amp-frontend"; then
                echo "기존 amp-frontend 프로세스를 블루 환경으로 마이그레이션합니다."
                pm2 stop amp-frontend
                echo "기존 프로세스 중지 완료. 블루 환경으로 재시작합니다."
                # 일반 모드로 시작 (standalone 이슈로 인해 안전한 방법 선택)
                PORT=3000 pm2 start npm --name "amp-frontend-blue" -- start
                echo "블루 환경 시작 완료. 기존 프로세스를 삭제합니다."
                pm2 delete amp-frontend
                CURRENT_ENV="blue"
                NEW_ENV="green"
                CURRENT_PORT=3000
                NEW_PORT=3001
              else
                # 아무것도 없으면 블루 환경부터 시작
                echo "실행 중인 프로세스가 없습니다. 새로운 블루 환경으로 시작합니다."
                CURRENT_ENV=""
                NEW_ENV="blue"
                CURRENT_PORT=""
                NEW_PORT=3000
              fi
            else
              # 기존 블루/그린 환경 감지
              echo "기존 블루/그린 환경 감지 중..."
              
              if pm2 list | grep -q "amp-frontend-blue"; then
                if pm2 show amp-frontend-blue | grep -q "online"; then
                  echo "블루 환경이 온라인 상태입니다. 그린 환경으로 배포합니다."
                  CURRENT_ENV="blue"
                  NEW_ENV="green"
                  CURRENT_PORT=3000
                  NEW_PORT=3001
                else
                  echo "블루 환경이 오프라인 상태입니다. 블루 환경으로 배포합니다."
                  CURRENT_ENV="green"
                  NEW_ENV="blue"
                  CURRENT_PORT=3001
                  NEW_PORT=3000
                fi
              elif pm2 list | grep -q "amp-frontend-green"; then
                if pm2 show amp-frontend-green | grep -q "online"; then
                  echo "그린 환경이 온라인 상태입니다. 블루 환경으로 배포합니다."
                  CURRENT_ENV="green"
                  NEW_ENV="blue"
                  CURRENT_PORT=3001
                  NEW_PORT=3000
                else
                  echo "그린 환경이 오프라인 상태입니다. 그린 환경으로 배포합니다."
                  CURRENT_ENV="blue"
                  NEW_ENV="green"
                  CURRENT_PORT=3000
                  NEW_PORT=3001
                fi
              else
                # 예상치 못한 상황 (둘 다 없거나 둘 다 오프라인)
                echo "예상치 못한 환경 상태. 기본 환경 설정으로 진행합니다."
                CURRENT_ENV="blue"
                NEW_ENV="green"
                CURRENT_PORT=3000
                NEW_PORT=3001
              fi
            fi

            # 변수 확인을 위한 디버깅 출력
            echo "배포 환경 변수:"
            echo "INITIAL_DEPLOYMENT=$INITIAL_DEPLOYMENT"
            echo "CURRENT_ENV=$CURRENT_ENV"
            echo "NEW_ENV=$NEW_ENV"
            echo "CURRENT_PORT=$CURRENT_PORT"
            echo "NEW_PORT=$NEW_PORT"

            # 시스템 리소스 정리 및 확인
            echo "시스템 리소스 정리 중..."
            pm2 flush # PM2 로그 정리
            sudo sh -c 'sync; echo 3 > /proc/sys/vm/drop_caches' # 시스템 캐시 정리

            # 새 환경의 포트가 사용 중인지 확인
            if lsof -i:$NEW_PORT; then
              echo "포트 $NEW_PORT가 이미 사용 중입니다. 해당 프로세스를 종료합니다."
              pm2 delete amp-frontend-$NEW_ENV 2>/dev/null || true
              sleep 2
            fi

            # 현재 빌드 백업
            if [ -d ".next" ]; then
              echo "현재 빌드 백업 중..."
              rm -rf .next_backup
              cp -r .next .next_backup
            fi

            # 최신 코드 가져오기
            echo "최신 코드 가져오는 중..."
            git pull

            # Next.js 캐시 완전 삭제
            echo "캐시 삭제 중..."
            rm -rf .next
            rm -rf node_modules/.cache

            # 빌드 시도
            echo "의존성 설치 중..."
            if ! npm install; then
              echo "npm install 실패, 롤백 수행 중..."
              if [ -d ".next_backup" ]; then
                rm -rf .next
                mv .next_backup .next
              fi
              exit 1
            fi

            echo "Next.js 빌드 중..."
            if ! npm run build; then
              echo "빌드 실패, 롤백 수행 중..."
              if [ -d ".next_backup" ]; then
                rm -rf .next
                mv .next_backup .next
              fi
              exit 1
            fi

            echo "새 버전($NEW_ENV) 배포 중... (포트: $NEW_PORT)"

            # Next.js 설정 확인 
            echo "Next.js 설정 확인 중..."
            USE_STANDALONE=false
            SERVER_JS_PATH=""

            # TypeScript와 JavaScript 설정 파일 모두 확인
            echo "next.config.ts와 next.config.js 파일 확인 중..."
            if [ -f "next.config.ts" ]; then
              echo "next.config.ts 파일이 존재합니다."
              # TypeScript 파일에서 standalone 설정 확인
              if grep -q "output.*standalone" next.config.ts; then
                echo "next.config.ts에서 standalone 출력 모드를 사용하는 것으로 감지됨"
                USE_STANDALONE=true
              fi
            elif [ -f "next.config.js" ]; then
              echo "next.config.js 파일이 존재합니다."
              # JavaScript 파일에서 standalone 설정 확인
              if grep -q "output.*standalone" next.config.js; then
                echo "next.config.js에서 standalone 출력 모드를 사용하는 것으로 감지됨"
                USE_STANDALONE=true
              fi
            else
              echo "next.config.js 또는 next.config.ts 파일이 존재하지 않습니다. 일반 모드로 진행합니다."
            fi

            # standalone 디렉토리 확인 (standalone 설정과 상관없이 실제 빌드 결과 확인)
            echo ".next 디렉토리 내용 확인:"
            ls -la .next/ || echo ".next 디렉토리가 존재하지 않습니다."

            # 기본 standalone 경로 확인
            if [ -d ".next/standalone" ]; then
              echo "standalone 디렉토리가 존재합니다."
              
              # 단일 프로젝트 구조 확인
              if [ -f ".next/standalone/server.js" ]; then
                echo "기본 경로에 server.js 파일이 존재합니다."
                USE_STANDALONE=true
                SERVER_JS_PATH=".next/standalone/server.js"
              # monorepo 구조 확인
              elif [ -f ".next/standalone/apps/client/server.js" ]; then
                echo "monorepo 구조의 경로에 server.js 파일이 존재합니다."
                USE_STANDALONE=true
                SERVER_JS_PATH=".next/standalone/apps/client/server.js"
              else
                echo "server.js 파일을 찾을 수 없습니다. 디렉토리 구조 확인:"
                find .next/standalone -type f -name "server.js" || echo "server.js 파일이 존재하지 않습니다."
                echo "standalone 모드를 사용할 수 없습니다."
                USE_STANDALONE=false
              fi
            else
              echo "standalone 디렉토리가 존재하지 않습니다. 일반 Next.js 모드로 시작합니다."
              USE_STANDALONE=false
            fi

            echo "USE_STANDALONE=$USE_STANDALONE"
            echo "SERVER_JS_PATH=$SERVER_JS_PATH"

            # 빌드 완료 후 적절한 방식으로 PM2 시작
            if [ "$USE_STANDALONE" = "true" ] && [ ! -z "$SERVER_JS_PATH" ]; then
              echo "standalone 모드로 시작합니다. 경로: $SERVER_JS_PATH"
              
              # monorepo 구조일 경우 경로에 따라 디렉토리 이동
              if [[ "$SERVER_JS_PATH" == *"apps/client"* ]]; then
                cd .next/standalone
                PORT=$NEW_PORT pm2 start apps/client/server.js --name "amp-frontend-$NEW_ENV"
              else
                cd .next/standalone
                PORT=$NEW_PORT pm2 start server.js --name "amp-frontend-$NEW_ENV"
              fi
              
              cd ~/amp/apps/client
              
              # 시작 확인
              sleep 2
              if ! pm2 show amp-frontend-$NEW_ENV | grep -q "online"; then
                echo "standalone 모드 시작 실패, 일반 모드로 재시도합니다."
                cd ~/amp/apps/client
                PORT=$NEW_PORT pm2 start npm --name "amp-frontend-$NEW_ENV" -- start
              fi
            else
              echo "일반 Next.js 모드로 시작합니다."
              PORT=$NEW_PORT pm2 start npm --name "amp-frontend-$NEW_ENV" -- start
            fi

            # 새 프로세스 상태 확인
            echo "새 프로세스 상태:"
            pm2 list
            pm2 show amp-frontend-$NEW_ENV

            # 새 버전이 정상적으로 시작되었는지 확인
            echo "새 버전 상태 확인 중..."
            RETRY_COUNT=0
            MAX_RETRIES=5
            HEALTH_CHECK_INTERVAL=5

            # 프로세스가 제대로 시작되었는지 확인
            if ! pm2 show amp-frontend-$NEW_ENV | grep -q "online"; then
              echo "프로세스가 시작되지 않았습니다. 로그를 확인하세요."
              pm2 logs amp-frontend-$NEW_ENV --lines 20 --nostream
              echo "롤백 수행 중..."
              pm2 delete amp-frontend-$NEW_ENV 2>/dev/null || true
              
              if [ -d ".next_backup" ]; then
                rm -rf .next
                mv .next_backup .next
                echo "이전 빌드로 복구 완료"
              fi
              
              echo "===== 롤백 완료: $(date) ====="
              exit 1
            fi

            while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
              sleep $HEALTH_CHECK_INTERVAL
              echo "헬스체크 시도 #$((RETRY_COUNT+1))..."
              
              # 새 프로세스 로그 캡처 (오류 진단용)
              echo "프로세스 로그 확인 중:"
              pm2 logs --lines 5 amp-frontend-$NEW_ENV --nostream
              
              HEALTH_CHECK=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:$NEW_PORT)
              echo "헬스체크 응답 코드: $HEALTH_CHECK"
              
              # 200(성공), 301(영구 리디렉션), 302(임시 리디렉션), 307(임시 리디렉션)을 모두 성공으로 간주
              if [ "$HEALTH_CHECK" = "200" ] || [ "$HEALTH_CHECK" = "301" ] || [ "$HEALTH_CHECK" = "302" ] || [ "$HEALTH_CHECK" = "307" ]; then
                echo "새 버전($NEW_ENV) 정상 작동 확인 (HTTP 상태: $HEALTH_CHECK)"
                
                # Nginx 설정 업데이트 (프록시 포트 변경) - 올바른 파일 경로 사용
                echo "Nginx 설정 업데이트 중..."
                sudo sed -i "s/proxy_pass http:\/\/localhost:[0-9]\+/proxy_pass http:\/\/localhost:$NEW_PORT/" /etc/nginx/sites-available/amp
                
                # Nginx 설정 테스트 및 재시작
                if sudo nginx -t; then
                  sudo systemctl reload nginx
                  echo "트래픽이 새 버전($NEW_ENV)으로 전환되었습니다."
                  
                  # 기존 버전 종료 (유예 시간 후)
                  if [ ! -z "$CURRENT_ENV" ]; then
                    echo "10초 후 이전 버전($CURRENT_ENV) 종료..."
                    sleep 10
                    pm2 delete amp-frontend-$CURRENT_ENV 2>/dev/null || true
                  fi
                  
                  # 백업 제거
                  rm -rf .next_backup
                  
                  # PM2 목록 저장 (경고 메시지 제거)
                  echo "PM2 목록 저장 중..."
                  pm2 save
                  
                  echo "===== 블루-그린 배포 완료: $(date) ====="
                  exit 0
                else
                  echo "Nginx 설정 오류, 롤백 수행 중..."
                  pm2 delete amp-frontend-$NEW_ENV
                  exit 1
                fi
              elif [ "$HEALTH_CHECK" = "000" ]; then
                echo "연결이 되지 않음 (응답 코드: 000). 프로세스 상태 확인:"
                pm2 show amp-frontend-$NEW_ENV
                echo "포트 $NEW_PORT 상태 확인:"
                netstat -tlpn | grep $NEW_PORT || echo "포트가 열려있지 않습니다."
              fi
              
              RETRY_COUNT=$((RETRY_COUNT+1))
              echo "재시도 중... ($RETRY_COUNT/$MAX_RETRIES)"
            done

            echo "새 버전($NEW_ENV) 시작 실패, 롤백 수행 중..."
            echo "실패한 프로세스 로그:"
            pm2 logs --lines 20 amp-frontend-$NEW_ENV --nostream

            # 새 프로세스 제거
            pm2 delete amp-frontend-$NEW_ENV 2>/dev/null || true

            # 이전 버전 복구
            if [ -d ".next_backup" ]; then
              rm -rf .next
              mv .next_backup .next
              echo "이전 빌드로 복구 완료"
            fi

            echo "===== 롤백 완료: $(date) ====="
            exit 1

      # 보안 그룹에서 GitHub Actions IP 제거
      - name: Remove GitHub Actions IP from Security Group
        if: always()
        run: |
          aws ec2 revoke-security-group-ingress \
              --group-id ${{ secrets.FRONTEND_SECURITY_GROUP_ID }} \
              --protocol tcp \
              --port 22 \
              --cidr ${{ steps.ip.outputs.ipv4 }}/32